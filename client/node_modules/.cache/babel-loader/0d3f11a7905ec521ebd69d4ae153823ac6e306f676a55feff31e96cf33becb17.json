{"ast":null,"code":"var _jsxFileName = \"/home/dark47/Desktop/ANGOLA BUSINESS CONNECT/ABC-APP/src/pages/Contexts/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// authContext.js\nimport React, { createContext, useContext, useState } from 'react';\n\n// Criando o contexto de autenticação\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook para usar o contexto de autenticação\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n\n// Provedor do contexto de autenticação\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null); // Estado para armazenar informações do usuário autenticado\n\n  // Função para realizar login\n  const login = async (email, password) => {\n    try {\n      // Simulação de login bem-sucedido (substituir com chamada real para o servidor)\n      // Aqui você pode implementar a lógica de login com axios.post ou qualquer outra biblioteca\n      // Por exemplo:\n      // const response = await axios.post('http://localhost:3001/login', { email, password });\n      const fakeResponse = {\n        data: {\n          email: 'user@example.com',\n          name: 'Usuário Exemplo'\n        }\n      };\n      setUser(fakeResponse.data); // Definindo o usuário no estado após o login\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Função para realizar logout\n  const logout = () => {\n    setUser(null); // Removendo informações do usuário ao fazer logout\n  };\n\n  // Valor do contexto que será fornecido aos componentes filhos\n  const contextValue = {\n    user,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","login","email","password","fakeResponse","data","name","success","error","console","logout","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dark47/Desktop/ANGOLA BUSINESS CONNECT/ABC-APP/src/pages/Contexts/AuthContext.jsx"],"sourcesContent":["// authContext.js\nimport React, { createContext, useContext, useState } from 'react';\n\n// Criando o contexto de autenticação\nconst AuthContext = createContext();\n\n// Hook para usar o contexto de autenticação\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\n// Provedor do contexto de autenticação\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null); // Estado para armazenar informações do usuário autenticado\n\n  // Função para realizar login\n  const login = async (email, password) => {\n    try {\n      // Simulação de login bem-sucedido (substituir com chamada real para o servidor)\n      // Aqui você pode implementar a lógica de login com axios.post ou qualquer outra biblioteca\n      // Por exemplo:\n      // const response = await axios.post('http://localhost:3001/login', { email, password });\n      const fakeResponse = { data: { email: 'user@example.com', name: 'Usuário Exemplo' } };\n      setUser(fakeResponse.data); // Definindo o usuário no estado após o login\n      return { success: true };\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      return { success: false };\n    }\n  };\n\n  // Função para realizar logout\n  const logout = () => {\n    setUser(null); // Removendo informações do usuário ao fazer logout\n  };\n\n  // Valor do contexto que será fornecido aos componentes filhos\n  const contextValue = {\n    user,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASM,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAON,UAAU,CAACI,WAAW,CAAC;AAChC;;AAEA;AAAAE,EAAA,CAJgBD,OAAO;AAKvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMW,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF;MACA;MACA;MACA;MACA,MAAMC,YAAY,GAAG;QAAEC,IAAI,EAAE;UAAEH,KAAK,EAAE,kBAAkB;UAAEI,IAAI,EAAE;QAAkB;MAAE,CAAC;MACrFN,OAAO,CAACI,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5B,OAAO;QAAEE,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO;QAAED,OAAO,EAAE;MAAM,CAAC;IAC3B;EACF,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBV,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAMW,YAAY,GAAG;IACnBZ,IAAI;IACJE,KAAK;IACLS;EACF,CAAC;EAED,oBACElB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAd,QAAA,EACvCA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACnB,GAAA,CApCeF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}