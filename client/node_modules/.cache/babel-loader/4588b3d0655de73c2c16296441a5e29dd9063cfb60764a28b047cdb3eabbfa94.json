{"ast":null,"code":"var _jsxFileName = \"/home/dark47/Desktop/ANGOLA BUSINESS CONNECT/ABC-APP/src/pages/Contexts/AuthContext.jsx\",\n  _s = $RefreshSig$();\n// src/contexts/AuthContext.js\n\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const login = userData => {\n    setUser(userData);\n    // Aqui você pode adicionar lógica para persistir o usuário (localStorage, sessionStorage, etc.)\n  };\n  const logout = () => {\n    setUser(null);\n    // Aqui você pode adicionar lógica para limpar a persistência do usuário\n  };\n  const updateUser = updatedUserData => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...updatedUserData\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      updateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","login","userData","logout","updateUser","updatedUserData","prevUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dark47/Desktop/ANGOLA BUSINESS CONNECT/ABC-APP/src/pages/Contexts/AuthContext.jsx"],"sourcesContent":["// src/contexts/AuthContext.js\n\nimport React, { createContext, useState } from 'react';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n\n    const login = (userData) => {\n        setUser(userData);\n        // Aqui você pode adicionar lógica para persistir o usuário (localStorage, sessionStorage, etc.)\n    };\n\n    const logout = () => {\n        setUser(null);\n        // Aqui você pode adicionar lógica para limpar a persistência do usuário\n    };\n\n    const updateUser = (updatedUserData) => {\n        setUser(prevUser => ({\n            ...prevUser,\n            ...updatedUserData\n        }));\n    };\n\n    return (\n        <AuthContext.Provider value={{ user, login, logout, updateUser }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMS,KAAK,GAAIC,QAAQ,IAAK;IACxBF,OAAO,CAACE,QAAQ,CAAC;IACjB;EACJ,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjBH,OAAO,CAAC,IAAI,CAAC;IACb;EACJ,CAAC;EAED,MAAMI,UAAU,GAAIC,eAAe,IAAK;IACpCL,OAAO,CAACM,QAAQ,KAAK;MACjB,GAAGA,QAAQ;MACX,GAAGD;IACP,CAAC,CAAC,CAAC;EACP,CAAC;EAED,oBACIX,OAAA,CAACC,WAAW,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET,IAAI;MAAEE,KAAK;MAAEE,MAAM;MAAEC;IAAW,CAAE;IAAAP,QAAA,EAC5DA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACd,EAAA,CAzBWF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}